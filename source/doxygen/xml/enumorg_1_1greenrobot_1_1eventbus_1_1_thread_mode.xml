<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="enumorg_1_1greenrobot_1_1eventbus_1_1_thread_mode" kind="enum" language="Java" prot="public">
    <compoundname>org::greenrobot::eventbus::ThreadMode</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="enumorg_1_1greenrobot_1_1eventbus_1_1_thread_mode_1a8bda6f5906db0f543ca9b4e89a4d4a06" prot="public" static="no" mutable="no">
        <type></type>
        <definition>org.greenrobot.eventbus.ThreadMode.POSTING</definition>
        <argsstring></argsstring>
        <name>POSTING</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subscriber will be called in the same thread, which is posting the event. This is the default. Event delivery implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for simple tasks that are known to complete is a very short time without requiring the main thread. Event handlers using this mode must return quickly to avoid blocking the posting thread, which may be the main thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" line="32" column="1" bodyfile="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="enumorg_1_1greenrobot_1_1eventbus_1_1_thread_mode_1a88cbe0f7c6adc557b46dfbcd59a09222" prot="public" static="no" mutable="no">
        <type></type>
        <definition>org.greenrobot.eventbus.ThreadMode.MAIN</definition>
        <argsstring></argsstring>
        <name>MAIN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subscriber will be called in Android&apos;s main thread (sometimes referred to as UI thread). If the posting thread is the main thread, event handler methods will be called directly. Event handlers using this mode must return quickly to avoid blocking the main thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" line="39" column="1" bodyfile="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="enumorg_1_1greenrobot_1_1eventbus_1_1_thread_mode_1a47d198c458d1a0637696e5ceedb6141e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>org.greenrobot.eventbus.ThreadMode.BACKGROUND</definition>
        <argsstring></argsstring>
        <name>BACKGROUND</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subscriber will be called in a background thread. If posting thread is not the main thread, event handler methods will be called directly in the posting thread. If the posting thread is the main thread, <ref refid="classorg_1_1greenrobot_1_1eventbus_1_1_event_bus" kindref="compound">EventBus</ref> uses a single background thread, that will deliver all its events sequentially. Event handlers using this mode should try to return quickly to avoid blocking the background thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" line="47" column="1" bodyfile="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="enumorg_1_1greenrobot_1_1eventbus_1_1_thread_mode_1a807b0f6b20b69aac2762a9d05d802b6a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>org.greenrobot.eventbus.ThreadMode.ASYNC</definition>
        <argsstring></argsstring>
        <name>ASYNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event handler methods are called in a separate thread. This is always independent from the posting thread and the main thread. Posting events never wait for event handler methods using this mode. Event handler methods should use this mode if their execution might take some time, e.g. for network access. Avoid triggering a large number of long running asynchronous handler methods at the same time to limit the number of concurrent threads. <ref refid="classorg_1_1greenrobot_1_1eventbus_1_1_event_bus" kindref="compound">EventBus</ref> uses a thread pool to efficiently reuse threads from completed asynchronous event handler notifications. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" line="57" column="1" bodyfile="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Each event handler method has a thread mode, which determines in which thread the method is to be called by <ref refid="classorg_1_1greenrobot_1_1eventbus_1_1_event_bus" kindref="compound">EventBus</ref>. <ref refid="classorg_1_1greenrobot_1_1eventbus_1_1_event_bus" kindref="compound">EventBus</ref> takes care of threading independently from the posting thread.</para><para><simplesect kind="see"><para><ref refid="classorg_1_1greenrobot_1_1eventbus_1_1_event_bus_1a40433655501552557d7a0796aa85a406" kindref="member">EventBus::register(Object)</ref> </para></simplesect>
<simplesect kind="author"><para>Markus </para></simplesect>
</para>    </detaileddescription>
    <location file="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" line="25" column="1" bodyfile="C:/Users/YukiUeda/Documents/GitHub/EventBus/EventBus/src/org/greenrobot/eventbus/ThreadMode.java" bodystart="25" bodyend="57"/>
    <listofallmembers>
      <member refid="enumorg_1_1greenrobot_1_1eventbus_1_1_thread_mode_1a807b0f6b20b69aac2762a9d05d802b6a" prot="public" virt="non-virtual"><scope>org::greenrobot::eventbus::ThreadMode</scope><name>ASYNC</name></member>
      <member refid="enumorg_1_1greenrobot_1_1eventbus_1_1_thread_mode_1a47d198c458d1a0637696e5ceedb6141e" prot="public" virt="non-virtual"><scope>org::greenrobot::eventbus::ThreadMode</scope><name>BACKGROUND</name></member>
      <member refid="enumorg_1_1greenrobot_1_1eventbus_1_1_thread_mode_1a88cbe0f7c6adc557b46dfbcd59a09222" prot="public" virt="non-virtual"><scope>org::greenrobot::eventbus::ThreadMode</scope><name>MAIN</name></member>
      <member refid="enumorg_1_1greenrobot_1_1eventbus_1_1_thread_mode_1a8bda6f5906db0f543ca9b4e89a4d4a06" prot="public" virt="non-virtual"><scope>org::greenrobot::eventbus::ThreadMode</scope><name>POSTING</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
